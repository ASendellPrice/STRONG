include: "Common.snake"

import glob

LIST_COGPATHS=[path.replace("/SCG.fna","") for path in  glob.glob("binning/*/Bin_*/SCG.fna")]

rule all:
     input: expand("{cogpaths}/profile_done",cogpaths=LIST_COGPATHS)


rule extract_subgraphs:
    input:   cogs="binning/{group}/{path1}/SCG.fna",
             gfa="assembly/high_res/{group}/simplified.gfa"
    output:  temp(touch("binning/{group}/{path1}/done")),
             Dir=directory("binning/{group}/{path1}/StrainAnalysis")
    log:     "binning/{group}/{path1}/extract_subgraph.log"
    params:  k=ASSEMBLY_K
    threads: THREADS
    shell:   "{SOFT}/subgraph-extractor -part-seq {input.cogs} -graph {input.gfa} -o {output.Dir} -k {params} -t {threads} -cds-len-est {SCG_DATA}/coreCogs.tsv> {log}"

# rule extract_subgraphs:
#     input:   cogs="binning/{group}/{path1}/SCG.fna",
#              gfa="assembly/high_res/{group}/simplified.gfa"
#     output:  touch("binning/{group}/{path1}/done")
#     params:  k=ASSEMBLY_K
#     threads: THREADS
#     shell:   "{SOFT}/subgraph-extractor -part-seq {input.cogs} -graph {input.gfa} -o binning/{wildcards.group}/{wildcards.path1} -k {params} -t {threads} -cds-len-est {SCG_DATA}/coreCogs.tsv >binning/{wildcards.group}/{wildcards.path1}/extract_subgraph.log"



# rule create_cog_folders:
#     input:   "{path}/done"
#     output:  touch("{path}/folder_done")
#     shell:   """
#     			for file in {wildcards.path}/*.gfa
#                 do 
#                 cog=$(basename $file)
#                 cog=${{cog%.gfa}}
#                 if [ ! -d {wildcards.path}/$cog ];then
#                 mkdir {wildcards.path}/$cog
#                 fi
#                 if [ ! -f {wildcards.path}/$cog/$cog'.gfa' ];then
#     			mv $file {wildcards.path}/$cog/$cog'.gfa'
#     			mv {wildcards.path}/$cog'.deadends' {wildcards.path}/$cog/
#                 mv {wildcards.path}/$cog'.stops' {wildcards.path}/$cog/
#     			fi
#     			done
#                 """

rule create_unitig_profile:
	input:  "{path}/done"
	output: touch('{path}/profile_done')
	shell : """
            for file in {wildcards.path}/StrainAnalysis/*gfa; do
              stub=${{file%.gfa}}
              if [ ! -f ${{stub}}.csv ]; then
                awk '/^S/{{print ">"$2"\\n"$3 }}' $file | grep ">" | sed 's/>//g' > $stub.id    
                awk 'FNR==NR {{hash[$1]; next}} $1 in hash' $stub.id assembly/high_res/group1/simplified.mult_prof | sed 's/\t/,/g' | sed s'/.$//' > ${{stub}}.csv
                rm $stub.id
              fi
            done
            """



rule BayesAGraphSVA:
    input:  "{path}/done"
    output: "{path}/StrainAnalysis_stdout.txt"
    params : kmer=ASSEMBLY_K,
             read_len=READ_LENGTH
    shell : "python3 /mnt/gpfs/chris/repos/BayesAGraphSVA/BayesPaths.py StrainAnalysis {kmer} StrainAnalysis -g 16 -e /mnt/gpfs/chris/repos/BayesAGraphSVA/runfg_source -r {read_len} > {output} " 





