include: "Common.snake"

configfile: "config.yaml"

import os.path

#rule all:
 #   input:  expand("assembly/{assembler}/{group}.fasta", assembler=ASSEMBLER, group=GROUPS),
  #          expand("profile/scaffolds/{group}.cov", group=GROUPS),
   #         expand("assembly/high_res/{group}/simplified.mult_prof", group=GROUPS)
    #message: "Dataset of {SAMPLE_COUNT} samples from {IN} has been processed."

# ---- Assembly ----------------------------------------------------------------

# Assemble with MegaHIT
#TODO limit memory
rule megahit:
    input:   left=left_reads, right=right_reads
    output:  "assembly/megahit/{group}/final.contigs.fa"
    params:  left=lambda w: ",".join(expand("{r}", r=left_reads(w))),
             right=lambda w: ",".join(expand("{r}", r=right_reads(w))),
             dir="assembly/megahit/{group}"
    threads: 16
    log:     "assembly/megahit/{group}.log"
    message: "Assembling {wildcards.group} with MegaHIT"
    shell:   "rm -rf {params.dir} && "
             "{SOFT}/megahit/megahit -1 {params.left} -2 {params.right}"
             " -t {threads} -o {params.dir} &> {log}"

rule megahit_convert:
    input:   "assembly/megahit/{group}/final.contigs.fa"
    output:  "assembly/megahit/{group}.fasta"
    message: "Converting megahit contig names from {wildcards.group} into our format"
    shell:   "sed -r 's/>(k[0-9]+)_([0-9]+) flag=. multi=([0-9]+|[0-9]+\.[0-9]+) len=([0-9]+)/>NODE_\\2_length_\\4_cov_\\3/' {input} > {output}"

# Assemble with SPAdes
rule spades:
    input:   left=left_reads, right=right_reads
    output:
        assembly="assembly/spades/{group}.fasta",
        high_res="assembly/high_res/{group}/graph_pack.gfa"
    params:  left=lambda w: " ".join(expand("-1 {r}", r=left_reads(w))),
             right=lambda w: " ".join(expand("-2 {r}", r=right_reads(w))),
             mem=120,
             dir="assembly/spades/{group}"
             #bh=lambda w: "" if is_fastq(w) else "--only-assembler"
    threads: 16
    log:     "assembly/spades/{group}.log"
    message: "Assembling {wildcards.group} with metaSPAdes"
    shell: 
        """
        {ASSEMBLER_DIR}/spades.py --meta --only-assembler --save-gp -t {threads} -m {params.mem} {params.left} {params.right} -o {params.dir} &> {log}
        cp {params.dir}/contigs.fasta {output.assembly}
        cp {params.dir}/K{ASSEMBLY_K}/saves/00_before_simplification/graph_pack* $(dirname {output.high_res})
        """

rule reads_yaml:
    output: "samples.yaml"
    run:
        print(samples_yaml(), file=open(output[0], 'w'))

rule simplify:
    input:
        "{path}/graph_pack.gfa"
    output:
        "{path}/simplified.gfa"
    params:  
        gp="{path}/graph_pack",
        out="{path}/simplified",
        tmp="{path}/tmp"
    threads: 16
    log:     "{path}/simplification.log"
    message: "Simplifying high-res graph in {wildcards.path}"
    shell: 
        '{SOFT}/spades-gsimplifier {params.gp} {params.out} --gfa -k {ASSEMBLY_K} '
        '-read-length {READ_LENGTH} -t {threads} -tmpdir {params.tmp} &> {log}'

rule unitig_profiles:
    input:
        graph="{path}.gfa",
        reads_desc="samples.yaml"
    output:
        "{path}.mult_prof"
    log:
        "{path}.mult_prof.log"
    threads:
        THREADS
    shell:
        "{SOFT}/spades-edge-profiles {input.reads_desc} {input.graph} {output} "
        "-k {ASSEMBLY_K} -t {threads} -tmpdir $(dirname {output})/tmp &> {log}"

rule copy_group_fasta:
    input:   "assembly/%s/{group}.fasta" % ASSEMBLER
    output:  "profile/scaffolds/{group}.fasta"
    shell: "cp {input} {output}"

#rule depth:
 #   input:   expand("profile/{{frags}}/{{group}}/{sample}.sorted.bam", sample=SAMPLES)
  #  output:  "profile/{frags}/{group}.cov"
   # log:     "profile/{frags}/{group}.log"
    #message: "Calculating depths for {wildcards.frags} from {wildcards.group} across samples"
    #threads: THREADS
    #shell:   """
     #        touch {output}
      #       """
#rule depth:
#    input:   expand("profile/jgi/{{frags}}/{{group}}/{sample}.sorted.bam", sample=SAMPLES)
#    output:  "profile/jgi/{frags}/{group}.{type,mpl|var}"
#    params:  lambda w: "" if w.type == "var" else "--noIntraDepthVariance"
#    log:     "profile/jgi/{frags}/{group}.{type}.log"
#    message: "Calculating depths for {wildcards.frags} contigs from {wildcards.group}"
#    threads: THREADS
#    shell:   """
#             . /home/snurk/miniconda3/etc/profile.d/conda.sh
#             set +u; conda activate metabat; set -u
#             export OMP_NUM_THREADS={threads} 
#             jgi_summarize_bam_contig_depths {params} \
#                  --outputDepth {output} {input} &> {log}
#             """
