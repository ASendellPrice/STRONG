include: "Common.snake"

configfile: "config.yaml"

import os.path

# ---- Assembly ----------------------------------------------------------------
LEFT_READS = [SAMPLE_READS[s][0] for s in SAMPLES]
RIGHT_READS = [SAMPLE_READS[s][1] for s in SAMPLES]

# Assemble with SPAdes
rule spades:
    input:   LEFT_READS, RIGHT_READS
    output:  assembly="assembly/spades/assembly.fasta", 
             high_res="assembly/high_res/graph_pack.gfa"
    params:  left=" ".join(expand("-1 {l}", l=LEFT_READS)),
             right=" ".join(expand("-2 {r}", r=RIGHT_READS)),
             mem=config["assembly"]["mem"],
             ks=','.join(map(str, config["assembly"]["k"])),
             dir="assembly/spades/"
             #bh=lambda w: "" if is_fastq(w) else "--only-assembler"
    threads: config["assembly"]["threads"]
    log:     "assembly/spades.log"
    message: "Assembling with metaSPAdes"
    shell: 
        """
        {ASSEMBLER_DIR}/spades.py --meta --only-assembler --save-gp -t {threads} -k {params.ks} -m {params.mem} {params.left} {params.right} -o {params.dir} &> {log}
        cp {params.dir}/contigs.fasta {output.assembly}
        cp {params.dir}/K{ASSEMBLY_K}/saves/00_before_simplification/graph_pack* $(dirname {output.high_res})
        """

rule reads_yaml:
    output: "samples.yaml"
    run:
        print(samples_yaml(SAMPLES), file=open(output[0], 'w'))

rule simplify:
    input:
        "{path}/graph_pack.gfa"
    output:
        "{path}/simplified.gfa"
    params:  
        gp="{path}/graph_pack",
        out="{path}/simplified",
        tmp="{path}/tmp"
    threads: 16
    log:     "{path}/simplification.log"
    message: "Simplifying high-res graph in {wildcards.path}"
    shell: 
        '{SOFT}/spades-gsimplifier {input} {params.out} --gfa -k {ASSEMBLY_K} '
        '--read-length {READ_LENGTH} -t {threads} --tmpdir {params.tmp} &> {log}'
