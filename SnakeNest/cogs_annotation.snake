ANNOTATION_SPLITS=100

#find for ORFs
rule prodigal:
    input:"assembly/%s/assembly.fasta" % ASSEMBLER
    output:
        faa="annotation/assembly.faa",
        fna="annotation/assembly.fna",
        gff="annotation/assembly.gff"
    log: 
        "annotation/prodigal.log" 
    shell:
        "prodigal -i {input} -a {output.faa} -d {output.fna} -f gff -p meta -o {output.gff} &> {log} "

#Cut faa file in chunks, so that we can have faster annotation  
rule split_fasta:
    input:
        "annotation/assembly.faa"
    output:
        expand("annotation/temp_splits/assembly_{nb}.faa",nb=range(ANNOTATION_SPLITS))
    shell:
        "{SCRIPTS}/Split_Fasta.py {input} {ANNOTATION_SPLITS} -o annotation/temp_splits/" 

rule download_rpsblast_cog_db:
    output: "%s/cog_dl_done"%COG_DB
    shell: """
    wget https://strongtest.s3.climb.ac.uk/rpsblast_cog_db.tar.gz
    tar -xvzf rpsblast_cog_db.tar.gz
    rm rpsblast_cog_db.tar.gz
    touch {output}
    """

rule rpsblast:
    input: faa = "{path}.faa",
           db_done = "%s/cog_dl_done"%COG_DB
    output: "{path}.Rpsblast_cogs.tsv"
    log: "{path}.Rpsblast_cogs.log"
    shell: "rpsblast -outfmt '6 qseqid sseqid evalue pident length slen qlen' -evalue 0.00001 -query {input} -db {COG_DB} -out {output}"

rule cat_split_annotation:
    input: expand("annotation/temp_splits/assembly_{nb}.Rpsblast_cogs.tsv", nb=range(ANNOTATION_SPLITS))
    output: "annotation/Rpsblast_cogs.tsv"
    shell: "cat {input} > {output} "

# select best hit and use criterion : min 5% coverage, min 1e-10 evalue
rule parse_cogs_annotation:
    input:
        "{path}/Rpsblast_cogs.tsv"    
    output:
        "{path}/Cogs_filtered.tsv"
    log: "{path}/cog_filtering.log"
    shell:
        "{SCRIPTS}/Filter_Cogs.py {input} --cdd_cog_file {SCG_DATA}/cdd_to_cog.tsv  > {output} 2> {log}"

# extract from the bed file all position of SCG 
rule extract_SCG_sequences:
    input:
        annotation="{path}/Cogs_filtered.tsv",
        gff="{path}/assembly.gff",
        fna="{path}/assembly.fna"
    output:
        "{path}/SCG.fna"
    shell:
        "{SCRIPTS}/Extract_SCG.py {input.fna} {input.annotation} {COG_FILE} {input.gff} > {output}"


# extract from the bed file all position of SCG 
rule get_SCG_tables:
    input:
        annotation="{path}/assembly.gff",
        scg="{path}/SCG.fna"
    output:
        "{path}/SCG_tables.tsv"
    shell:
        "{SCRIPTS}/ParseTable.py {input.annotation} {input.scg} > {output}"
